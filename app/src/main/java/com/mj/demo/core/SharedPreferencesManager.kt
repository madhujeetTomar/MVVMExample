package com.mj.demo.coreimport android.content.Contextimport android.content.SharedPreferencesimport java.util.*/** * The type Shared preferences manager. */class SharedPreferencesManager private constructor() {    private var sharedPref: SharedPreferences? = null    companion object {        private var manager: SharedPreferencesManager? = null        private val sharedPreferencesInstance: SharedPreferences?             get() {                if (manager == null) {                    manager = SharedPreferencesManager()                    val ctx: Context = EnteApplication().applicationContext                    manager!!.sharedPref =                        ctx.getSharedPreferences("Entedeal", Context.MODE_PRIVATE)                }                return manager!!.sharedPref            }        /**         * Delete all.         */        fun deleteAll() {            sharedPreferencesInstance!!.edit().clear()                .commit()        }        /**         * Sets preference.         *         * @param key   the key         * @param value the value         *//*    Save string data in Sharedpreferences     */        fun setPreference(key: String?, value: String?) {            val editor =                sharedPreferencesInstance!!.edit()            editor.putString(key, value)            editor.commit()        }        fun setPreference(            key: String?,            value: HashSet<String?>?        ) {            val editor =                sharedPreferencesInstance!!.edit()            editor.putStringSet(key, value)            editor.commit()        }        /**         * Sets preference.         * @param key   the key         * @param value the value         */        /**         * Sets preference.         *         * @param key   the key         * @param value the value         */        fun setPreference(key: String?, value: Long) {            val editor =                sharedPreferencesInstance!!.edit()            editor.putLong(key, value)            editor.commit()        }        /**         * Sets preference.         *         * @param key   the key         * @param value the value         */        fun setPreference(key: String?, value: Boolean) {            val editor =                sharedPreferencesInstance!!.edit()            editor.putBoolean(key, value)            editor.commit()        }        fun setPreference(key: String?, value: Int) {            val editor =                sharedPreferencesInstance!!.edit()            editor.putInt(key, value)            editor.commit()        }        /**         * Remove preference.         *         * @param key the key         */        fun removePreference(key: String?) {            val editor =                sharedPreferencesInstance!!.edit()            editor.remove(key)            editor.commit()        }        /**         * Gets string preference.         *         * @param key      the key         * @param defValue the def value         * @return the string preference         *//*    Fetching saved string data from Sharedprefrences     */        fun getStringPreference(key: String?, defValue: String?): String? {            return sharedPreferencesInstance!!                .getString(key, defValue)        }        /**         * Gets store id.         *         * @return the store id         */        val categoryid: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.GET_CATEGORY_ID, "")        val isLoggedIn: Boolean            get() = sharedPreferencesInstance!!                .getBoolean(SharedPreferenceConstant.IS_LOGGED_IN, false)        val cityId: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.GET_CITY_ID, "")        val customerToken: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.LOGGED_IN_TOKEN, "")        val guestToken: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.GUEST_TOKEN, "")        val email: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.EMAIL, "")        val cartid: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.CART_ID, "")        val name: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.NAME, "")        val allDealCategoryid: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.ALL_DEALS_CATEGORY_ID, "")        val toursNTravel: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.GET_TOURS_TRAVELS, "")        val nameGift: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.GIFT_NAME, "")        val emailGift: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.GIFT_EMAIL, "")        val phoneGift: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.GIFT_PHONE, "")        val coupon_code: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.COUPONCODE, "")        val cityName: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.CITY_NAME, "")        val tokenId: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.TOKEN_ID, "")        val countSize: Int            get() = sharedPreferencesInstance!!                .getInt(SharedPreferenceConstant.COUNT_SIZE, 0)        fun getCartCount(key: String?): Int {            return sharedPreferencesInstance!!                .getInt(SharedPreferenceConstant.CART_COUNT_VALUE, 0)        }        val customerID: Int            get() = sharedPreferencesInstance!!                .getInt(SharedPreferenceConstant.ID, 0)        val futureDeals: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.GET_FUTURE_DEALS, "")        val stringListData: HashSet<String>?            get() = sharedPreferencesInstance!!!!.getStringSet(                SharedPreferenceConstant.ITEM_SET,                HashSet()            ) as HashSet<String>?        val isPreviously_Started: Boolean            get() = sharedPreferencesInstance!!                .getBoolean(SharedPreferenceConstant.PREVIOUSLY_STARTED, false)        val deviceToken: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.FCM_TOKEN, "")        val dayOfDeal: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.DAY_DEAL, "")        val weekDeal: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.WEEK_DEAL, "")        val monthDeal: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.MONTH_DEAL, "")        val push: String?            get() = sharedPreferencesInstance!!.getString("push", "")        val allDeal: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.ALL_DEAL, "")        val customerDetail: String?            get() = sharedPreferencesInstance!!                .getString(SharedPreferenceConstant.CUSTOMER_DETAIL, "")    }}